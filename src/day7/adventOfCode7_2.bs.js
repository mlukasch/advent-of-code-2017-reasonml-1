// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var $$Array                 = require("bs-platform/lib/js/array.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var Caml_format             = require("bs-platform/lib/js/caml_format.js");
var Js_primitive            = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function words(string) {
  var match = string.match((/[a-zA-z]+/gi));
  if (match !== null) {
    return $$Array.to_list(match);
  } else {
    return $$Array.to_list(/* array */[]);
  }
}

function number(string) {
  var param = (/(\d+)/).exec(string);
  if (param !== null) {
    return Js_primitive.null_undefined_to_opt(Caml_array.caml_array_get(param, 1));
  } else {
    return /* None */0;
  }
}

var input = $$Array.to_list($$Array.map((function (a) {
            var match = words(a);
            if (match) {
              var match$1 = number(a);
              var index = match$1 ? Caml_format.caml_int_of_string(match$1[0]) : 0;
              return /* tuple */[
                      match[0],
                      index,
                      match[1]
                    ];
            } else {
              throw [
                    Caml_builtin_exceptions.match_failure,
                    [
                      "/Users/Nykanen/Projects/oss/advent-of-code/src/day7/adventOfCode7_2.re",
                      21,
                      13
                    ]
                  ];
            }
          }), "pbga (66)\nxhth (57)\nebii (61)\nhavc (66)\nktlj (57)\nfwft (72) -> ktlj, cntj, xhth\nqoyq (66)\npadx (45) -> pbga, havc, qoyq\ntknk (41) -> ugml, padx, fwft\njptl (61)\nugml (68) -> gyxo, ebii, jptl\ngyxo (61)\ncntj (57)".split("\n")));

function isLeaf(param) {
  return +(List.length(param[2]) === 0);
}

function getChildIndexes(param) {
  return $$Array.fold_left((function (a, param) {
                return a + param[1] | 0;
              }), 0, param[2]);
}

var match;

try {
  match = List.find((function (param) {
          return +("tknk" === param[0]);
        }), input);
}
catch (exn){
  if (exn === Caml_builtin_exceptions.not_found) {
    throw Caml_builtin_exceptions.not_found;
  } else {
    throw exn;
  }
}

var bottomChildren = match[2];

function compareChildren() {
  List.hd(bottomChildren);
  console.log(bottomChildren);
  return /* () */0;
}

console.log(compareChildren(bottomChildren));

exports.words           = words;
exports.number          = number;
exports.input           = input;
exports.isLeaf          = isLeaf;
exports.getChildIndexes = getChildIndexes;
exports.bottomChildren  = bottomChildren;
exports.compareChildren = compareChildren;
/* input Not a pure module */
