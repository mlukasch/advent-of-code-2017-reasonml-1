// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List               = require("bs-platform/lib/js/list.js");
var Pervasives         = require("bs-platform/lib/js/pervasives.js");
var Input$AdventOfCode = require("./input.bs.js");

function hexAdd(a, b) {
  return /* tuple */[
          a[0] + b[0] | 0,
          a[1] + b[1] | 0,
          a[2] + b[2] | 0
        ];
}

function hexSubstract(a, b) {
  return /* tuple */[
          a[0] - b[0] | 0,
          a[1] - b[1] | 0,
          a[2] - b[2] | 0
        ];
}

var start = /* tuple */[
  0,
  0,
  0
];

var n = /* tuple */[
  1,
  0,
  -1
];

var ne = /* tuple */[
  1,
  -1,
  0
];

var se = /* tuple */[
  0,
  -1,
  1
];

var s = /* tuple */[
  -1,
  0,
  1
];

var sw = /* tuple */[
  -1,
  1,
  0
];

var nw = /* tuple */[
  0,
  1,
  -1
];

var hexDirections_001 = /* :: */[
  ne,
  /* :: */[
    se,
    /* :: */[
      s,
      /* :: */[
        sw,
        /* :: */[
          nw,
          /* [] */0
        ]
      ]
    ]
  ]
];

var hexDirections = /* :: */[
  n,
  hexDirections_001
];

var hexDiagonals = /* :: */[
  /* tuple */[
    2,
    -1,
    -1
  ],
  /* :: */[
    /* tuple */[
      1,
      -2,
      1
    ],
    /* :: */[
      /* tuple */[
        -1,
        -1,
        2
      ],
      /* :: */[
        /* tuple */[
          -2,
          1,
          1
        ],
        /* :: */[
          /* tuple */[
            -1,
            2,
            -1
          ],
          /* :: */[
            /* tuple */[
              1,
              1,
              -2
            ],
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

function hexLength(param) {
  return ((Pervasives.abs(param[0]) + Pervasives.abs(param[1]) | 0) + Pervasives.abs(param[2]) | 0) / 2 | 0;
}

function hexDistance(a, b) {
  return hexLength(hexSubstract(a, b));
}

function hexDirection(direction) {
  return List.nth(hexDirections, direction);
}

function hexDiagonal(direction) {
  return List.nth(hexDiagonals, direction);
}

function hexNeighbour(hex, direction) {
  return hexAdd(hex, List.nth(hexDirections, direction));
}

function hexDiagonalNeighbour(hex, direction) {
  return hexAdd(hex, List.nth(hexDiagonals, direction));
}

function traverse(l, startHex) {
  return List.fold_left(hexAdd, startHex, l);
}

var test1_001 = /* :: */[
  ne,
  /* :: */[
    ne,
    /* [] */0
  ]
];

var test1 = /* :: */[
  ne,
  test1_001
];

var test2_001 = /* :: */[
  ne,
  /* :: */[
    sw,
    /* :: */[
      sw,
      /* [] */0
    ]
  ]
];

var test2 = /* :: */[
  ne,
  test2_001
];

var test3_001 = /* :: */[
  ne,
  /* :: */[
    s,
    /* :: */[
      s,
      /* [] */0
    ]
  ]
];

var test3 = /* :: */[
  ne,
  test3_001
];

var test4_001 = /* :: */[
  sw,
  /* :: */[
    se,
    /* :: */[
      sw,
      /* :: */[
        sw,
        /* [] */0
      ]
    ]
  ]
];

var test4 = /* :: */[
  se,
  test4_001
];

var b = traverse(test1, start);

console.log(hexLength(hexSubstract(start, b)));

var b$1 = traverse(test2, start);

console.log(hexLength(hexSubstract(start, b$1)));

var b$2 = traverse(test3, start);

console.log(hexLength(hexSubstract(start, b$2)));

var b$3 = traverse(test4, start);

console.log(hexLength(hexSubstract(start, b$3)));

var inputs_001 = /* :: */[
  Input$AdventOfCode.input2,
  /* :: */[
    Input$AdventOfCode.input3,
    /* [] */0
  ]
];

var inputs = /* :: */[
  Input$AdventOfCode.input1,
  inputs_001
];

var inputEnd = List.fold_left((function (a, b) {
        return traverse(b, a);
      }), start, inputs);

console.log(hexLength(hexSubstract(start, inputEnd)));

exports.hexAdd               = hexAdd;
exports.hexSubstract         = hexSubstract;
exports.start                = start;
exports.n                    = n;
exports.ne                   = ne;
exports.se                   = se;
exports.s                    = s;
exports.sw                   = sw;
exports.nw                   = nw;
exports.hexDirections        = hexDirections;
exports.hexDiagonals         = hexDiagonals;
exports.hexLength            = hexLength;
exports.hexDistance          = hexDistance;
exports.hexDirection         = hexDirection;
exports.hexDiagonal          = hexDiagonal;
exports.hexNeighbour         = hexNeighbour;
exports.hexDiagonalNeighbour = hexDiagonalNeighbour;
exports.traverse             = traverse;
exports.test1                = test1;
exports.test2                = test2;
exports.test3                = test3;
exports.test4                = test4;
exports.inputs               = inputs;
exports.inputEnd             = inputEnd;
/*  Not a pure module */
